<style lang="less">

</style>

<template>
  <view class="page">
    <view class="page__bd">
      <view class="weui-panel">
        <view class="weui-panel__hd" wx:if="{{loginUser}}">
          <userline :loginUser.sync="loginUser" />
        </view>
        <view class="weui-panel__bd">
          <view class="weui-media-box weui-media-box_text" wx:for="{{arr}}" wx:key="unique" wx:for-item="item" wx:for-index="i">
            <view class="weui-media-box__desc">{{item.content}}</view>
            <view class="weui-media-box__info">
              <view class="weui-media-box__info__meta">{{item.nickName}}</view>
              <view class="weui-media-box__info__meta">{{item.showTime}}</view>
              <!-- <view class="weui-media-box__info__meta weui-media-box__info__meta_extra">分享</view> -->
            </view>
          </view>
        </view>
        <loadmore :loadingStatus.sync="loadingStatus" />
      </view>
    </view>
  </view>
    <toast />
</template>

<script>
import wepy from "wepy";
import Toast from "wepy-com-toast";
import loadmore from "../components/loadmore";
import userline from "../components/userline";
import loginApi from "../api/login";
import tucaoApi from "../api/tucao";
export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: "吐槽墙",
    enablePullDownRefresh: true,
    onReachBottomDistance: 20
  };
  components = {
    loadmore: loadmore,
    userline: userline,
    toast: Toast
  };
  data = {
    loginUser: null,
    arr: [],
    loadingStatus: 1,
    isBottomLoad: false,
    bottomLoadText: "拼命加载中..."
  };
  loadData(options, callback) {
    var self = this;
    options = options || {};
    var isShowLoading = options.showLoading;
    if (isShowLoading) self.loadingStatus = 1;
    self.loadingStatus = 0;
    var arr = self.data.arr;
    var beginTime =
      arr.length > 0
        ? options.isPullDown
          ? arr[0].createTime
          : arr[arr.length - 1].createTime
        : null;
    tucaoApi
      .getList(options.isPullDown, beginTime)
      .then(resp => {
        if (resp.status == 0) {
          self.showMsg(resp.msg, "warn");
          return;
        }
        var newArr = resp.rows;
        if (newArr.length == 0) {
          callback && callback(true);
          self.loadingStatus = 2;
          self.$apply();
          return;
        }
        if (options.isPullDown) {
          arr = newArr.concat(arr);
        } else {
          arr = arr.concat(newArr);
        }
        self.arr = arr;
        self.$apply();
        callback && callback();
      })
      .catch(resp => {
        console.log(resp);
        self.showMsg(resp.errMsg, "warn");
      });
  }
  onLoad() {
    let self = this;
    loginApi.getFullInfo(e => {
      self.loginUser = e;
      self.$apply();
    });
    self.loadData();
  }
  onShareAppMessage () {
    return {
      title: '欢迎吐槽',
      path: '/page/index'
    }
  }
  onPullDownRefresh() {
    this.loadData(
      {
        isPullDown: true
      },
      function() {
        wepy.stopPullDownRefresh();
      }
    );
  }
  onReachBottom() {
    if (this.loadingStatus != 2) {
      this.loadData({
        showLoading: true
      });
    }
  }
  showMsg(content, type = "warn") {
    this.$invoke("toast", "show", {
      title: content,
      img: "../assets/images/" + type + ".png"
    });
  }
}
</script>
